import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from flask import Flask, request, jsonify
from pymongo import MongoClient
from datetime import datetime
from dotenv import load_dotenv

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

# Load environment variables
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
YOUR_TELEGRAM_HANDLE = os.getenv("YOUR_TELEGRAM_HANDLE")
MOVIE_GROUP_LINK = "https://t.me/addlist/EOSX8n4AoC1jYWU1"

# Connect to MongoDB
client = MongoClient(MONGO_URI)
db = client.get_database('bot_database')
users_collection = db.get_collection('users')
referrals_collection = db.get_collection('referrals')

# Flask app for Render
app = Flask(__name__)

# Dictionaries for multi-language support
MESSAGES = {
    "en": {
        "start_greeting": "Hey ЁЯСЛ! Welcome to the Movies Group Bot. Get your favorite movies by following these simple steps:",
        "start_step1": "1. Click the button below to join our movie group.",
        "start_step2": "2. Go to the group and type the name of the movie you want.",
        "start_step3": "3. The bot will give you a link to your movie.",
        "start_group_button": "Join Movies Group",
        "language_choice": "Choose your language:",
        "language_selected": "Language changed to English.",
        "earn_approved": "You are approved! Here is your referral link:",
        "earn_rules_title": "ЁЯТ░ Rules for Earning",
        "earn_rule1": "1. Get people to join our group using your link.",
        "earn_rule2": "2. When your referred user searches for a movie in the group, they'll be taken to our bot via a shortlink.",
        "earn_rule3": "3. After they complete the shortlink process, you'll earn money. Note that you earn only <b>once per day</b> per referred user.",
        "earnings_breakdown": "Earnings Breakdown:",
        "owner_share": "Owner's Share:",
        "your_share": "Your Share:",
        "earnings_update": "Your earnings will automatically update in your account.",
        "not_approved_earn": "Your request is pending. Please wait for the admin's approval.",
        "not_approved_withdraw": "You must be approved to use this command.",
        "withdrawal_details_title": "ЁЯТ░ Withdrawal Details ЁЯТ░",
        "total_earnings": "Total Earnings:",
        "total_referrals": "Total Referrals:",
        "active_earners": "Active Earners Today:",
        "contact_admin_text": "Click the button below to contact the admin for withdrawal.",
        "contact_admin_button": "Contact Admin",
        "new_referral_notification": "ЁЯе│ Good news! A new user has joined through your link: {full_name} (@{username}).",
        "approve_request": "New user {full_name} (@{username}, ID: {user_id}) wants to start earning. Approve?",
        "request_sent": "Your request has been sent to the admin for approval. Please wait.",
        "earning_approved": "Congratulations! You have been approved to earn. Use /earn to get your link.",
        "earning_denied": "Your request was not approved.",
        "user_approved_admin": "User {user_id} has been approved.",
        "user_cancelled_admin": "User {user_id}'s request has been cancelled.",
        "daily_earning_update": "ЁЯОЙ <b>Your earnings have been updated!</b>\n"
                                "A referred user ({full_name}) completed the shortlink process today.\n"
                                "Your new balance: ${new_balance:.4f}",
        "daily_earning_limit": "This user has already earned you money today. Your earnings will be updated again tomorrow.",
        "checkbot_success": "тЬЕ Bot is connected to this group!",
        "checkbot_failure": "тЭМ Bot is not connected to this group. Please check the settings.",
        "stats_message": "Bot Stats:\n\nЁЯСе Total Users: {total_users}\nЁЯОп Approved Earners: {approved_users}",
        "broadcast_admin_only": "тЭМ This command is for the bot admin only.",
        "broadcast_message": "Please reply to a message with `/broadcast` to send it to all users.",
        "broadcast_success": "тЬЕ Message sent to all {count} users.",
        "broadcast_failed": "тЭМ Failed to send message to all users. Please check logs for errors.",
        "broadcast_title": "ЁЯУв New Message from Admin!",
        "broadcast_forwarding_error": "тЭМ Error forwarding message.",
    },
    "hi": {
        "start_greeting": "рдирдорд╕реНрддреЗ ЁЯСЛ! рдореВрд╡реА рдЧреНрд░реБрдк рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдЗрди рдЖрд╕рд╛рди рд╕реНрдЯреЗрдкреНрд╕ рдХреЛ рдлреЙрд▓реЛ рдХрд░рдХреЗ рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рдореВрд╡реА рдкрд╛рдПрдБ:",
        "start_step1": "1. рд╣рдорд╛рд░реЗ рдореВрд╡реА рдЧреНрд░реБрдк рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред",
        "start_step2": "2. рдЧреНрд░реБрдк рдореЗрдВ рдЬрд╛рдХрд░ рдЕрдкрдиреА рдордирдкрд╕рдВрдж рдореВрд╡реА рдХрд╛ рдирд╛рдо рд▓рд┐рдЦреЗрдВред",
        "start_step3": "3. рдмреЙрдЯ рдЖрдкрдХреЛ рдЖрдкрдХреА рдореВрд╡реА рдХреА рд▓рд┐рдВрдХ рджреЗрдЧрд╛ред",
        "start_group_button": "рдореВрд╡реА рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░реЗрдВ",
        "language_choice": "рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:",
        "language_selected": "рднрд╛рд╖рд╛ рд╣рд┐рдВрджреА рдореЗрдВ рдмрджрд▓ рджреА рдЧрдИ рд╣реИред",
        "earn_approved": "рдЖрдк рд╕реНрд╡реАрдХреГрдд рд╣реИрдВ! рдЖрдкрдХреА рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ рдпрд╣рд╛рдБ рд╣реИ:",
        "earn_rules_title": "ЁЯТ░ рдХрдорд╛рдИ рдХреЗ рдирд┐рдпрдо",
        "earn_rule1": "1. рдЕрдкрдиреА рд▓рд┐рдВрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд▓реЛрдЧреЛрдВ рдХреЛ рд╣рдорд╛рд░реЗ рдЧреНрд░реБрдк рдореЗрдВ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВред",
        "earn_rule2": "2. рдЬрдм рдЖрдкрдХрд╛ рд░реЗрдлрд░ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдпреВрдЬрд░ рдЧреНрд░реБрдк рдореЗрдВ рдХрд┐рд╕реА рдореВрд╡реА рдХреЛ рдЦреЛрдЬрддрд╛ рд╣реИ, рддреЛ рдЙрд╕реЗ рд╢реЙрд░реНрдЯрд▓рд┐рдВрдХ рдХреЗ рдЬрд░рд┐рдП рд╣рдорд╛рд░реЗ рдмреЙрдЯ рдкрд░ рд▓реЗ рдЬрд╛рдпрд╛ рдЬрд╛рдПрдЧрд╛ред",
        "earn_rule3": "3. рдЬрдм рд╡реЗ рд╢реЙрд░реНрдЯрд▓рд┐рдВрдХ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдкреВрд░реА рдХрд░ рд▓реЗрдВрдЧреЗ, рддреЛ рдЖрдкрдХреЛ рдкреИрд╕реЗ рдорд┐рд▓реЗрдВрдЧреЗред рдзреНрдпрд╛рди рджреЗрдВ рдХрд┐ рдЖрдк рдкреНрд░рддрд┐ рд░реЗрдлрд░ рдХрд┐рдП рдЧрдП рдпреВрдЬрд░ рд╕реЗ рдХреЗрд╡рд▓ <b>рдПрдХ рдмрд╛рд░ рдкреНрд░рддрд┐ рджрд┐рди</b> рдХрдорд╛ рд╕рдХрддреЗ рд╣реИрдВред",
        "earnings_breakdown": "рдХрдорд╛рдИ рдХрд╛ рд╡рд┐рд╡рд░рдг:",
        "owner_share": "рдорд╛рд▓рд┐рдХ рдХрд╛ рд╣рд┐рд╕реНрд╕рд╛:",
        "your_share": "рдЖрдкрдХрд╛ рд╣рд┐рд╕реНрд╕рд╛:",
        "earnings_update": "рдЖрдкрдХреА рдХрдорд╛рдИ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рдЖрдкрдХреЗ рдЦрд╛рддреЗ рдореЗрдВ рдЕрдкрдбреЗрдЯ рд╣реЛ рдЬрд╛рдПрдЧреАред",
        "not_approved_earn": "рдЖрдкрдХрд╛ рдЕрдиреБрд░реЛрдз рд▓рдВрдмрд┐рдд рд╣реИред рдХреГрдкрдпрд╛ рдПрдбрдорд┐рди рдХреА рд╕реНрд╡реАрдХреГрддрд┐ рдХрд╛ рдЗрдВрддрдЬрд╛рд░ рдХрд░реЗрдВред",
        "not_approved_withdraw": "рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рд╕реНрд╡реАрдХреГрдд рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред",
        "withdrawal_details_title": "ЁЯТ░ рдирд┐рдХрд╛рд╕реА рдХрд╛ рд╡рд┐рд╡рд░рдг ЁЯТ░",
        "total_earnings": "рдХреБрд▓ рдХрдорд╛рдИ:",
        "total_referrals": "рдХреБрд▓ рд░реЗрдлрд░рд▓:",
        "active_earners": "рдЖрдЬ рдХреЗ рд╕рдХреНрд░рд┐рдп рдХрдорд╛рдиреЗ рд╡рд╛рд▓реЗ:",
        "contact_admin_text": "рдирд┐рдХрд╛рд╕реА рдХреЗ рд▓рд┐рдП рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░рдиреЗ рд╣реЗрддреБ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред",
        "contact_admin_button": "рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ",
        "new_referral_notification": "ЁЯе│ рдЦреБрд╢рдЦрдмрд░реА! рдПрдХ рдирдпрд╛ рдпреВрдЬрд░ рдЖрдкрдХреА рд▓рд┐рдВрдХ рд╕реЗ рдЬреБрдбрд╝рд╛ рд╣реИ: {full_name} (@{username})ред",
        "approve_request": "рдирдпрд╛ рдпреВрдЬрд░ {full_name} (@{username}, ID: {user_id}) рдХрдорд╛рдИ рд╢реБрд░реВ рдХрд░рдирд╛ рдЪрд╛рд╣рддрд╛ рд╣реИред рдХреНрдпрд╛ рдЖрдк рд╕реНрд╡реАрдХреГрдд рдХрд░рддреЗ рд╣реИрдВ?",
        "request_sent": "рдЖрдкрдХрд╛ рдЕрдиреБрд░реЛрдз рдПрдбрдорд┐рди рдХреЛ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВред",
        "earning_approved": "рдмрдзрд╛рдИ рд╣реЛ! рдЖрдкрдХреЛ рдХрдорд╛рдИ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╕реНрд╡реАрдХреГрдд рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред рдЕрдкрдиреА рд▓рд┐рдВрдХ рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдП /earn рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        "earning_denied": "рдЖрдкрдХрд╛ рдЕрдиреБрд░реЛрдз рд╕реНрд╡реАрдХреГрдд рдирд╣реАрдВ рд╣реБрдЖред",
        "user_approved_admin": "рдпреВрдЬрд░ {user_id} рдХреЛ рд╕реНрд╡реАрдХреГрдд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред",
        "user_cancelled_admin": "рдпреВрдЬрд░ {user_id} рдХрд╛ рдЕрдиреБрд░реЛрдз рд░рджреНрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред",
        "daily_earning_update": "ЁЯОЙ <b>рдЖрдкрдХреА рдХрдорд╛рдИ рдЕрдкрдбреЗрдЯ рд╣реЛ рдЧрдИ рд╣реИ!</b>\n"
                                "рдПрдХ рд░реЗрдлрд░ рдХрд┐рдП рдЧрдП рдпреВрдЬрд░ ({full_name}) рдиреЗ рдЖрдЬ рд╢реЙрд░реНрдЯрд▓рд┐рдВрдХ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдкреВрд░реА рдХреАред\n"
                                "рдЖрдкрдХрд╛ рдирдпрд╛ рдмреИрд▓реЗрдВрд╕: ${new_balance:.4f}",
        "daily_earning_limit": "рдЗрд╕ рдпреВрдЬрд░ рд╕реЗ рдЖрдкрдиреЗ рдЖрдЬ рдкрд╣рд▓реЗ рд╣реА рдХрдорд╛рдИ рдХрд░ рд▓реА рд╣реИред рдЖрдкрдХреА рдХрдорд╛рдИ рдХрд▓ рдлрд┐рд░ рд╕реЗ рдЕрдкрдбреЗрдЯ рд╣реЛрдЧреАред",
        "checkbot_success": "тЬЕ рдмреЙрдЯ рдЗрд╕ рдЧреНрд░реБрдк рд╕реЗ рдЬреБрдбрд╝рд╛ рд╣реБрдЖ рд╣реИ!",
        "checkbot_failure": "тЭМ рдмреЙрдЯ рдЗрд╕ рдЧреНрд░реБрдк рд╕реЗ рдЬреБрдбрд╝рд╛ рд╣реБрдЖ рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдЬрд╛рдВрдЪреЗрдВред",
        "stats_message": "рдмреЙрдЯ рдХреЗ рдЖрдВрдХрдбрд╝реЗ:\n\nЁЯСе рдХреБрд▓ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛: {total_users}\nЁЯОп рд╕реНрд╡реАрдХреГрдд рдХрдорд╛рдиреЗ рд╡рд╛рд▓реЗ: {approved_users}",
        "broadcast_admin_only": "тЭМ рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдмреЙрдЯ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред",
        "broadcast_message": "рд╕рднреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рд╕рдВрджреЗрд╢ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдХрд┐рд╕реА рд╕рдВрджреЗрд╢ рдХрд╛ `/broadcast` рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреЗрдВред",
        "broadcast_success": "тЬЕ рд╕рдВрджреЗрд╢ рд╕рднреА {count} рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рднреЗрдЬрд╛ рдЧрдпрд╛ред",
        "broadcast_failed": "тЭМ рд╕рднреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рд╕рдВрджреЗрд╢ рднреЗрдЬрдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред рдХреГрдкрдпрд╛ рддреНрд░реБрдЯрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рд▓реЙрдЧ рдЬрд╛рдВрдЪреЗрдВред",
        "broadcast_title": "ЁЯУв рдПрдбрдорд┐рди рдХреА рдУрд░ рд╕реЗ рдирдпрд╛ рд╕рдВрджреЗрд╢!",
        "broadcast_forwarding_error": "тЭМ рд╕рдВрджреЗрд╢ рдлреЙрд░рд╡рд░реНрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред",
    }
}

async def get_user_lang(user_id):
    """Fetches user's language preference from the database."""
    user_data = users_collection.find_one({"user_id": user_id})
    return user_data.get("lang", "en") if user_data else "en"

async def set_user_lang(user_id, lang):
    """Sets user's language preference in the database."""
    users_collection.update_one(
        {"user_id": user_id},
        {"$set": {"lang": lang}},
        upsert=True
    )

async def send_language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("English ЁЯЗмЁЯЗз", callback_data="lang_en"),
         InlineKeyboardButton("рд╣рд┐рдВрджреА ЁЯЗоЁЯЗ│", callback_data="lang_hi")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("Choose your language:", reply_markup=reply_markup)

async def send_start_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    lang = await get_user_lang(user.id)
    
    keyboard = [
        [InlineKeyboardButton(MESSAGES[lang]["start_group_button"], url=MOVIE_GROUP_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        f"{MESSAGES[lang]['start_greeting']}\n\n"
        f"{MESSAGES[lang]['start_step1']}\n"
        f"{MESSAGES[lang]['start_step2']}\n"
        f"{MESSAGES[lang]['start_step3']}"
    )

    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.message.reply_html(message, reply_markup=reply_markup)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    referral_id = context.args[0].replace("ref_", "") if context.args and context.args[0].startswith("ref_") else None

    # Update or insert user data.
    users_collection.update_one(
        {"user_id": user.id},
        {"$setOnInsert": {
            "username": user.username,
            "full_name": user.full_name,
            "lang": "en",
            "is_approved": False,
            "earnings": 0.0
        }},
        upsert=True
    )

    # Initial message: Language choice
    keyboard = [
        [InlineKeyboardButton("English ЁЯЗмЁЯЗз", callback_data="lang_en"),
         InlineKeyboardButton("рд╣рд┐рдВрджреА ЁЯЗоЁЯЗ│", callback_data="lang_hi")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Choose your language:", reply_markup=reply_markup)

    # Referral logic remains the same
    if referral_id:
        referral_data = referrals_collection.find_one({"referred_user_id": user.id})
        if not referral_data:
            referrals_collection.insert_one({
                "referrer_id": int(referral_id),
                "referred_user_id": user.id,
                "referred_username": user.username,
                "join_date": datetime.now(),
                "is_active_earner": False
            })
            try:
                referrer_lang = await get_user_lang(int(referral_id))
                await context.bot.send_message(
                    chat_id=int(referral_id),
                    text=MESSAGES[referrer_lang]["new_referral_notification"].format(
                        full_name=user.full_name, username=user.username
                    )
                )
            except Exception as e:
                logging.error(f"Could not notify referrer {referral_id}: {e}")

async def earn_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    lang = await get_user_lang(user.id)
    user_data = users_collection.find_one({"user_id": user.id})

    if not user_data:
        keyboard = [
            [
                InlineKeyboardButton("Approve", callback_data=f"approve_{user.id}"),
                InlineKeyboardButton("Cancel", callback_data=f"cancel_{user.id}"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=MESSAGES["en"]["approve_request"].format(
                full_name=user.full_name, username=user.username, user_id=user.id
            ),
            reply_markup=reply_markup,
        )
        await update.message.reply_text(MESSAGES[lang]["request_sent"])
    elif user_data.get("is_approved"):
        referral_link = f"https://t.me/MoviesGroupLinkp_bot?start=ref_{user.id}" 
        
        message = (
            f"<b>{MESSAGES[lang]['earn_approved']}</b>\n\n"
            f"<code>{referral_link}</code>\n\n"
            f"<b>{MESSAGES[lang]['earn_rules_title']}</b>\n"
            f"1. {MESSAGES[lang]['earn_rule1']}\n"
            f"2. {MESSAGES[lang]['earn_rule2']}\n"
            f"3. {MESSAGES[lang]['earn_rule3']}\n\n"
            f"<b>{MESSAGES[lang]['earnings_breakdown']}</b>\n"
            f"<b>{MESSAGES[lang]['owner_share']}</b> $0.006\n"
            f"<b>{MESSAGES[lang]['your_share']}</b> $0.0018\n\n"
            f"<i>{MESSAGES[lang]['earnings_update']}</i>"
        )
        await update.message.reply_html(message)
    else:
        await update.message.reply_text(MESSAGES[lang]["not_approved_earn"])

async def withdraw_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    lang = await get_user_lang(user.id)
    user_data = users_collection.find_one({"user_id": user.id, "is_approved": True})

    if not user_data:
        await update.message.reply_text(MESSAGES[lang]["not_approved_withdraw"])
        return

    earnings = user_data.get("earnings", 0.0)
    referrals_count = referrals_collection.count_documents({"referrer_id": user.id})
    active_earners_count = referrals_collection.count_documents({"referrer_id": user.id, "is_active_earner": True})
    
    withdraw_link = f"https://t.me/{YOUR_TELEGRAM_HANDLE}"

    keyboard = [[InlineKeyboardButton(MESSAGES[lang]["contact_admin_button"], url=withdraw_link)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = (
        f"<b>{MESSAGES[lang]['withdrawal_details_title']}</b>\n\n"
        f"<b>{MESSAGES[lang]['total_earnings']}</b> <b>${earnings:.4f}</b>\n"
        f"<b>{MESSAGES[lang]['total_referrals']}</b> <b>{referrals_count}</b>\n"
        f"<b>{MESSAGES[lang]['active_earners']}</b> <b>{active_earners_count}</b>"
    )

    await update.message.reply_html(message, reply_markup=reply_markup)

async def checkbot_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    lang = await get_user_lang(user.id)
    
    try:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="Testing connection...")
        await update.message.reply_text(MESSAGES[lang]["checkbot_success"])
    except Exception as e:
        logging.error(f"Bot is not connected: {e}")
        await update.message.reply_text(MESSAGES[lang]["checkbot_failure"])

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    lang = await get_user_lang(user.id)
    
    if user.id != ADMIN_ID:
        await update.message.reply_text(MESSAGES[lang]["broadcast_admin_only"])
        return

    total_users = users_collection.count_documents({})
    approved_users = users_collection.count_documents({"is_approved": True})
    
    await update.message.reply_text(
        MESSAGES[lang]["stats_message"].format(
            total_users=total_users, approved_users=approved_users
        )
    )

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    lang = await get_user_lang(user.id)

    if user.id != ADMIN_ID:
        await update.message.reply_text(MESSAGES[lang]["broadcast_admin_only"])
        return

    if not update.message.reply_to_message:
        await update.message.reply_text(MESSAGES[lang]["broadcast_message"])
        return

    message_to_send = update.message.reply_to_message
    all_users = list(users_collection.find({}, {"user_id": 1}))
    sent_count = 0
    failed_count = 0
    
    await update.message.reply_text("Sending broadcast message...")

    for user_doc in all_users:
        user_id = user_doc["user_id"]
        if user_id == ADMIN_ID:
            continue
        try:
            await context.bot.forward_message(chat_id=user_id, from_chat_id=update.effective_chat.id, message_id=message_to_send.message_id)
            sent_count += 1
        except Exception as e:
            logging.error(f"Could not broadcast message to user {user_id}: {e}")
            failed_count += 1
    
    if failed_count > 0:
        await update.message.reply_text(MESSAGES[lang]["broadcast_failed"].format(count=sent_count))
    else:
        await update.message.reply_text(MESSAGES[lang]["broadcast_success"].format(count=sent_count))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    user_id = user.id
    
    if query.data.startswith("lang_"):
        lang = query.data.split("_")[1]
        await set_user_lang(user_id, lang)
        
        # Now, send the main start message
        lang = await get_user_lang(user.id)
        keyboard = [
            [InlineKeyboardButton(MESSAGES[lang]["start_group_button"], url=MOVIE_GROUP_LINK)],
            [InlineKeyboardButton("English ЁЯЗмЁЯЗз" if lang == 'en' else "English ЁЯЗмЁЯЗз тЬЕ", callback_data="lang_en"),
             InlineKeyboardButton("рд╣рд┐рдВрджреА ЁЯЗоЁЯЗ│" if lang == 'hi' else "рд╣рд┐рдВрджреА ЁЯЗоЁЯЗ│ тЬЕ", callback_data="lang_hi")],
            [InlineKeyboardButton("Back", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            f"{MESSAGES[lang]['start_greeting']}\n\n"
            f"{MESSAGES[lang]['start_step1']}\n"
            f"{MESSAGES[lang]['start_step2']}\n"
            f"{MESSAGES[lang]['start_step3']}"
        )
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
        
    elif query.data == "back_to_start":
        lang = await get_user_lang(user.id)
        
        message = (
            f"{MESSAGES[lang]['start_greeting']}\n\n"
            f"<b>1.</b> {MESSAGES[lang]['start_step1'].replace('1. ', '')}\n"
            f"<b>2.</b> {MESSAGES[lang]['start_step2'].replace('2. ', '')}\n"
            f"<b>3.</b> {MESSAGES[lang]['start_step3'].replace('3. ', '')}"
        )
        
        keyboard = [
            [InlineKeyboardButton(MESSAGES[lang]["start_group_button"], url=MOVIE_GROUP_LINK)],
            [InlineKeyboardButton("English ЁЯЗмЁЯЗз", callback_data="lang_en"),
             InlineKeyboardButton("рд╣рд┐рдВрджреА ЁЯЗоЁЯЗ│", callback_data="lang_hi")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')

    elif query.data.startswith("approve_"):
        action, user_id_str = query.data.split("_")
        user_id = int(user_id_str)
        admin_lang = await get_user_lang(query.from_user.id)
        
        users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"is_approved": True, "earnings": 0.0}},
            upsert=True
        )
        user_lang = await get_user_lang(user_id)
        await context.bot.send_message(chat_id=user_id, text=MESSAGES[user_lang]["earning_approved"])
        await query.edit_message_text(text=MESSAGES[admin_lang]["user_approved_admin"].format(user_id=user_id))
    
    elif query.data.startswith("cancel_"):
        action, user_id_str = query.data.split("_")
        user_id = int(user_id_str)
        admin_lang = await get_user_lang(query.from_user.id)
        
        users_collection.delete_one({"user_id": user_id})
        user_lang = await get_user_lang(user_id)
        await context.bot.send_message(chat_id=user_id, text=MESSAGES[user_lang]["earning_denied"])
        await query.edit_message_text(text=MESSAGES[admin_lang]["user_cancelled_admin"].format(user_id=user_id))
        
    else:
        # Default handler to catch any other callbacks
        logging.info(f"Unhandled callback query: {query.data}")

async def process_shortlink_completion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    referred_user = update.effective_user
    referral_data = referrals_collection.find_one({"referred_user_id": referred_user.id})

    if referral_data:
        referrer_id = referral_data["referrer_id"]
        referrer_data = users_collection.find_one({"user_id": referrer_id, "is_approved": True})
        
        if referrer_data:
            today = datetime.now().date()
            last_earning_date = referrer_data.get("last_earning_date")
            referrer_lang = await get_user_lang(referrer_id)
            
            if not last_earning_date or last_earning_date.date() < today:
                earnings_to_add = 0.0018
                new_balance = referrer_data.get('earnings', 0) + earnings_to_add
                
                users_collection.update_one(
                    {"user_id": referrer_id},
                    {"$inc": {"earnings": earnings_to_add}, "$set": {"last_earning_date": datetime.now()}}
                )
                referrals_collection.update_one(
                    {"referred_user_id": referred_user.id},
                    {"$set": {"is_active_earner": True}}
                )
                await context.bot.send_message(
                    chat_id=referrer_id,
                    text=MESSAGES[referrer_lang]["daily_earning_update"].format(
                        full_name=referred_user.full_name, new_balance=new_balance
                    ),
                    parse_mode='HTML'
                )
                logging.info(f"Updated earnings for referrer {referrer_id}. New balance: {new_balance}")
            else:
                await context.bot.send_message(
                    chat_id=referrer_id,
                    text=MESSAGES[referrer_lang]["daily_earning_limit"]
                )

@app.route('/shortlink_completed/<int:user_id>', methods=['GET'])
def shortlink_completed(user_id):
    return jsonify({"status": "success", "message": "Earnings will be updated."})

# Global application object
application = Application.builder().token(BOT_TOKEN).build()

# The entry point for the Render server
if __name__ == "__main__":
    
    # Set up all handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("earn", earn_command))
    application.add_handler(CommandHandler("withdraw", withdraw_command))
    application.add_handler(CommandHandler("checkbot", checkbot_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CallbackQueryHandler(button_handler))

    @app.route('/', methods=['POST'])
    async def webhook_handler():
        """Handle incoming webhook updates from Telegram."""
        try:
            update = Update.de_json(request.get_json(), application.bot)
            await application.process_update(update)
        except Exception as e:
            logging.error(f"Error processing update: {e}")
        return "ok"

    # Set up the webhook URL before running the Flask app
    import asyncio
    async def set_webhook():
        try:
            await application.bot.set_webhook(url=os.getenv("RENDER_EXTERNAL_URL"))
            logging.info("Webhook set successfully.")
        except Exception as e:
            logging.error(f"Could not set webhook: {e}")

    asyncio.run(set_webhook())
    
    app.run(host='0.0.0.0', port=os.environ.get('PORT', 5000))
